// vite.config.ts
import { defineConfig } from "file:///Users/spro/Documents/ai/product-compare/node_modules/.pnpm/vite@5.2.11_@types+node@20.12.12_sass@1.74.1_terser@5.31.0/node_modules/vite/dist/node/index.js";
import { resolve as resolve2 } from "path";
import libAssetsPlugin from "file:///Users/spro/Documents/ai/product-compare/node_modules/.pnpm/@laynezh+vite-plugin-lib-assets@0.5.21/node_modules/@laynezh/vite-plugin-lib-assets/dist/index.js";

// utils/plugins/make-manifest-plugin.ts
import * as fs from "fs";
import * as path from "path";
import { ManifestParser, colorLog } from "file:///Users/spro/Documents/ai/product-compare/packages/dev-utils/dist/index.js";
import { pathToFileURL } from "url";
import * as process2 from "process";
var __vite_injected_original_dirname = "/Users/spro/Documents/ai/product-compare/chrome-extension/utils/plugins";
var { resolve } = path;
var rootDir = resolve(__vite_injected_original_dirname, "..", "..");
var manifestFile = resolve(rootDir, "manifest.js");
var getManifestWithCacheBurst = () => {
  const withCacheBurst = (path2) => `${path2}?${Date.now().toString()}`;
  if (process2.platform === "win32") {
    return import(withCacheBurst(pathToFileURL(manifestFile).href));
  }
  return import(withCacheBurst(manifestFile));
};
function makeManifestPlugin(config) {
  function makeManifest(manifest, to) {
    if (!fs.existsSync(to)) {
      fs.mkdirSync(to);
    }
    const manifestPath = resolve(to, "manifest.json");
    const isFirefox = process2.env.__FIREFOX__;
    fs.writeFileSync(manifestPath, ManifestParser.convertManifestToString(manifest, isFirefox ? "firefox" : "chrome"));
    colorLog(`Manifest file copy complete: ${manifestPath}`, "success");
  }
  return {
    name: "make-manifest",
    buildStart() {
      this.addWatchFile(manifestFile);
    },
    async writeBundle() {
      const outDir2 = config.outDir;
      const manifest = await getManifestWithCacheBurst();
      makeManifest(manifest.default, outDir2);
    }
  };
}

// vite.config.ts
import { watchRebuildPlugin } from "file:///Users/spro/Documents/ai/product-compare/packages/hmr/dist/index.js";
var __vite_injected_original_dirname2 = "/Users/spro/Documents/ai/product-compare/chrome-extension";
var rootDir2 = resolve2(__vite_injected_original_dirname2);
var libDir = resolve2(rootDir2, "lib");
var isDev = process.env.__DEV__ === "true";
var isProduction = !isDev;
var outDir = resolve2(rootDir2, "..", "dist");
var vite_config_default = defineConfig({
  resolve: {
    alias: {
      "@root": rootDir2,
      "@lib": libDir,
      "@assets": resolve2(libDir, "assets")
    }
  },
  plugins: [
    libAssetsPlugin({
      outputPath: outDir
    }),
    makeManifestPlugin({ outDir }),
    isDev && watchRebuildPlugin({ reload: true })
  ],
  publicDir: resolve2(rootDir2, "public"),
  build: {
    lib: {
      formats: ["iife"],
      entry: resolve2(__vite_injected_original_dirname2, "lib/background/index.ts"),
      name: "BackgroundScript",
      fileName: "background"
    },
    outDir,
    sourcemap: isDev,
    minify: isProduction,
    reportCompressedSize: isProduction,
    modulePreload: true,
    rollupOptions: {
      external: ["chrome"]
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAidXRpbHMvcGx1Z2lucy9tYWtlLW1hbmlmZXN0LXBsdWdpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9Vc2Vycy9zcHJvL0RvY3VtZW50cy9haS9wcm9kdWN0LWNvbXBhcmUvY2hyb21lLWV4dGVuc2lvblwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL3Nwcm8vRG9jdW1lbnRzL2FpL3Byb2R1Y3QtY29tcGFyZS9jaHJvbWUtZXh0ZW5zaW9uL3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9zcHJvL0RvY3VtZW50cy9haS9wcm9kdWN0LWNvbXBhcmUvY2hyb21lLWV4dGVuc2lvbi92aXRlLmNvbmZpZy50c1wiO2ltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnO1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IGxpYkFzc2V0c1BsdWdpbiBmcm9tICdAbGF5bmV6aC92aXRlLXBsdWdpbi1saWItYXNzZXRzJztcbmltcG9ydCBtYWtlTWFuaWZlc3RQbHVnaW4gZnJvbSAnLi91dGlscy9wbHVnaW5zL21ha2UtbWFuaWZlc3QtcGx1Z2luJztcbmltcG9ydCB7IHdhdGNoUmVidWlsZFBsdWdpbiB9IGZyb20gJ0BjaHJvbWUtZXh0ZW5zaW9uLWJvaWxlcnBsYXRlL2htcic7XG5cbmNvbnN0IHJvb3REaXIgPSByZXNvbHZlKF9fZGlybmFtZSk7XG5jb25zdCBsaWJEaXIgPSByZXNvbHZlKHJvb3REaXIsICdsaWInKTtcblxuY29uc3QgaXNEZXYgPSBwcm9jZXNzLmVudi5fX0RFVl9fID09PSAndHJ1ZSc7XG5jb25zdCBpc1Byb2R1Y3Rpb24gPSAhaXNEZXY7XG5cbmNvbnN0IG91dERpciA9IHJlc29sdmUocm9vdERpciwgJy4uJywgJ2Rpc3QnKTtcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gIHJlc29sdmU6IHtcbiAgICBhbGlhczoge1xuICAgICAgJ0Byb290Jzogcm9vdERpcixcbiAgICAgICdAbGliJzogbGliRGlyLFxuICAgICAgJ0Bhc3NldHMnOiByZXNvbHZlKGxpYkRpciwgJ2Fzc2V0cycpLFxuICAgIH0sXG4gIH0sXG4gIHBsdWdpbnM6IFtcbiAgICBsaWJBc3NldHNQbHVnaW4oe1xuICAgICAgb3V0cHV0UGF0aDogb3V0RGlyLFxuICAgIH0pLFxuICAgIG1ha2VNYW5pZmVzdFBsdWdpbih7IG91dERpciB9KSxcbiAgICBpc0RldiAmJiB3YXRjaFJlYnVpbGRQbHVnaW4oeyByZWxvYWQ6IHRydWUgfSksXG4gIF0sXG4gIHB1YmxpY0RpcjogcmVzb2x2ZShyb290RGlyLCAncHVibGljJyksXG4gIGJ1aWxkOiB7XG4gICAgbGliOiB7XG4gICAgICBmb3JtYXRzOiBbJ2lpZmUnXSxcbiAgICAgIGVudHJ5OiByZXNvbHZlKF9fZGlybmFtZSwgJ2xpYi9iYWNrZ3JvdW5kL2luZGV4LnRzJyksXG4gICAgICBuYW1lOiAnQmFja2dyb3VuZFNjcmlwdCcsXG4gICAgICBmaWxlTmFtZTogJ2JhY2tncm91bmQnLFxuICAgIH0sXG4gICAgb3V0RGlyLFxuICAgIHNvdXJjZW1hcDogaXNEZXYsXG4gICAgbWluaWZ5OiBpc1Byb2R1Y3Rpb24sXG4gICAgcmVwb3J0Q29tcHJlc3NlZFNpemU6IGlzUHJvZHVjdGlvbixcbiAgICBtb2R1bGVQcmVsb2FkOiB0cnVlLFxuICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgIGV4dGVybmFsOiBbJ2Nocm9tZSddLFxuICAgIH0sXG4gIH0sXG59KTtcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL3Nwcm8vRG9jdW1lbnRzL2FpL3Byb2R1Y3QtY29tcGFyZS9jaHJvbWUtZXh0ZW5zaW9uL3V0aWxzL3BsdWdpbnNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9zcHJvL0RvY3VtZW50cy9haS9wcm9kdWN0LWNvbXBhcmUvY2hyb21lLWV4dGVuc2lvbi91dGlscy9wbHVnaW5zL21ha2UtbWFuaWZlc3QtcGx1Z2luLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9zcHJvL0RvY3VtZW50cy9haS9wcm9kdWN0LWNvbXBhcmUvY2hyb21lLWV4dGVuc2lvbi91dGlscy9wbHVnaW5zL21ha2UtbWFuaWZlc3QtcGx1Z2luLnRzXCI7aW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IE1hbmlmZXN0UGFyc2VyLCBjb2xvckxvZyB9IGZyb20gJ0BjaHJvbWUtZXh0ZW5zaW9uLWJvaWxlcnBsYXRlL2Rldi11dGlscyc7XG5pbXBvcnQgdHlwZSB7IFBsdWdpbk9wdGlvbiB9IGZyb20gJ3ZpdGUnO1xuaW1wb3J0IHsgcGF0aFRvRmlsZVVSTCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgKiBhcyBwcm9jZXNzIGZyb20gJ3Byb2Nlc3MnO1xuXG5jb25zdCB7IHJlc29sdmUgfSA9IHBhdGg7XG5cbmNvbnN0IHJvb3REaXIgPSByZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJyk7XG5jb25zdCBtYW5pZmVzdEZpbGUgPSByZXNvbHZlKHJvb3REaXIsICdtYW5pZmVzdC5qcycpO1xuXG5jb25zdCBnZXRNYW5pZmVzdFdpdGhDYWNoZUJ1cnN0ID0gKCk6IFByb21pc2U8eyBkZWZhdWx0OiBjaHJvbWUucnVudGltZS5NYW5pZmVzdFYzIH0+ID0+IHtcbiAgY29uc3Qgd2l0aENhY2hlQnVyc3QgPSAocGF0aDogc3RyaW5nKSA9PiBgJHtwYXRofT8ke0RhdGUubm93KCkudG9TdHJpbmcoKX1gO1xuICAvKipcbiAgICogSW4gV2luZG93cywgaW1wb3J0KCkgZG9lc24ndCB3b3JrIHdpdGhvdXQgZmlsZTovLyBwcm90b2NvbC5cbiAgICogU28sIHdlIG5lZWQgdG8gY29udmVydCBwYXRoIHRvIGZpbGU6Ly8gcHJvdG9jb2wuICh1cmwucGF0aFRvRmlsZVVSTClcbiAgICovXG4gIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG4gICAgcmV0dXJuIGltcG9ydCh3aXRoQ2FjaGVCdXJzdChwYXRoVG9GaWxlVVJMKG1hbmlmZXN0RmlsZSkuaHJlZikpO1xuICB9XG4gIHJldHVybiBpbXBvcnQod2l0aENhY2hlQnVyc3QobWFuaWZlc3RGaWxlKSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWtlTWFuaWZlc3RQbHVnaW4oY29uZmlnOiB7IG91dERpcjogc3RyaW5nIH0pOiBQbHVnaW5PcHRpb24ge1xuICBmdW5jdGlvbiBtYWtlTWFuaWZlc3QobWFuaWZlc3Q6IGNocm9tZS5ydW50aW1lLk1hbmlmZXN0VjMsIHRvOiBzdHJpbmcpIHtcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmModG8pKSB7XG4gICAgICBmcy5ta2RpclN5bmModG8pO1xuICAgIH1cbiAgICBjb25zdCBtYW5pZmVzdFBhdGggPSByZXNvbHZlKHRvLCAnbWFuaWZlc3QuanNvbicpO1xuXG4gICAgY29uc3QgaXNGaXJlZm94ID0gcHJvY2Vzcy5lbnYuX19GSVJFRk9YX187XG4gICAgZnMud3JpdGVGaWxlU3luYyhtYW5pZmVzdFBhdGgsIE1hbmlmZXN0UGFyc2VyLmNvbnZlcnRNYW5pZmVzdFRvU3RyaW5nKG1hbmlmZXN0LCBpc0ZpcmVmb3ggPyAnZmlyZWZveCcgOiAnY2hyb21lJykpO1xuXG4gICAgY29sb3JMb2coYE1hbmlmZXN0IGZpbGUgY29weSBjb21wbGV0ZTogJHttYW5pZmVzdFBhdGh9YCwgJ3N1Y2Nlc3MnKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ21ha2UtbWFuaWZlc3QnLFxuICAgIGJ1aWxkU3RhcnQoKSB7XG4gICAgICB0aGlzLmFkZFdhdGNoRmlsZShtYW5pZmVzdEZpbGUpO1xuICAgIH0sXG4gICAgYXN5bmMgd3JpdGVCdW5kbGUoKSB7XG4gICAgICBjb25zdCBvdXREaXIgPSBjb25maWcub3V0RGlyO1xuICAgICAgY29uc3QgbWFuaWZlc3QgPSBhd2FpdCBnZXRNYW5pZmVzdFdpdGhDYWNoZUJ1cnN0KCk7XG4gICAgICBtYWtlTWFuaWZlc3QobWFuaWZlc3QuZGVmYXVsdCwgb3V0RGlyKTtcbiAgICB9LFxuICB9O1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUE2VixTQUFTLG9CQUFvQjtBQUMxWCxTQUFTLFdBQUFBLGdCQUFlO0FBQ3hCLE9BQU8scUJBQXFCOzs7QUNGNlgsWUFBWSxRQUFRO0FBQzdhLFlBQVksVUFBVTtBQUN0QixTQUFTLGdCQUFnQixnQkFBZ0I7QUFFekMsU0FBUyxxQkFBcUI7QUFDOUIsWUFBWUMsY0FBYTtBQUx6QixJQUFNLG1DQUFtQztBQU96QyxJQUFNLEVBQUUsUUFBUSxJQUFJO0FBRXBCLElBQU0sVUFBVSxRQUFRLGtDQUFXLE1BQU0sSUFBSTtBQUM3QyxJQUFNLGVBQWUsUUFBUSxTQUFTLGFBQWE7QUFFbkQsSUFBTSw0QkFBNEIsTUFBdUQ7QUFDdkYsUUFBTSxpQkFBaUIsQ0FBQ0MsVUFBaUIsR0FBR0EsS0FBSSxJQUFJLEtBQUssSUFBSSxFQUFFLFNBQVMsQ0FBQztBQUt6RSxNQUFZLHNCQUFhLFNBQVM7QUFDaEMsV0FBTyxPQUFPLGVBQWUsY0FBYyxZQUFZLEVBQUUsSUFBSTtBQUFBLEVBQy9EO0FBQ0EsU0FBTyxPQUFPLGVBQWUsWUFBWTtBQUMzQztBQUVlLFNBQVIsbUJBQW9DLFFBQTBDO0FBQ25GLFdBQVMsYUFBYSxVQUFxQyxJQUFZO0FBQ3JFLFFBQUksQ0FBSSxjQUFXLEVBQUUsR0FBRztBQUN0QixNQUFHLGFBQVUsRUFBRTtBQUFBLElBQ2pCO0FBQ0EsVUFBTSxlQUFlLFFBQVEsSUFBSSxlQUFlO0FBRWhELFVBQU0sWUFBb0IsYUFBSTtBQUM5QixJQUFHLGlCQUFjLGNBQWMsZUFBZSx3QkFBd0IsVUFBVSxZQUFZLFlBQVksUUFBUSxDQUFDO0FBRWpILGFBQVMsZ0NBQWdDLFlBQVksSUFBSSxTQUFTO0FBQUEsRUFDcEU7QUFFQSxTQUFPO0FBQUEsSUFDTCxNQUFNO0FBQUEsSUFDTixhQUFhO0FBQ1gsV0FBSyxhQUFhLFlBQVk7QUFBQSxJQUNoQztBQUFBLElBQ0EsTUFBTSxjQUFjO0FBQ2xCLFlBQU1DLFVBQVMsT0FBTztBQUN0QixZQUFNLFdBQVcsTUFBTSwwQkFBMEI7QUFDakQsbUJBQWEsU0FBUyxTQUFTQSxPQUFNO0FBQUEsSUFDdkM7QUFBQSxFQUNGO0FBQ0Y7OztBRDVDQSxTQUFTLDBCQUEwQjtBQUpuQyxJQUFNQyxvQ0FBbUM7QUFNekMsSUFBTUMsV0FBVUMsU0FBUUMsaUNBQVM7QUFDakMsSUFBTSxTQUFTRCxTQUFRRCxVQUFTLEtBQUs7QUFFckMsSUFBTSxRQUFRLFFBQVEsSUFBSSxZQUFZO0FBQ3RDLElBQU0sZUFBZSxDQUFDO0FBRXRCLElBQU0sU0FBU0MsU0FBUUQsVUFBUyxNQUFNLE1BQU07QUFDNUMsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDMUIsU0FBUztBQUFBLElBQ1AsT0FBTztBQUFBLE1BQ0wsU0FBU0E7QUFBQSxNQUNULFFBQVE7QUFBQSxNQUNSLFdBQVdDLFNBQVEsUUFBUSxRQUFRO0FBQUEsSUFDckM7QUFBQSxFQUNGO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDUCxnQkFBZ0I7QUFBQSxNQUNkLFlBQVk7QUFBQSxJQUNkLENBQUM7QUFBQSxJQUNELG1CQUFtQixFQUFFLE9BQU8sQ0FBQztBQUFBLElBQzdCLFNBQVMsbUJBQW1CLEVBQUUsUUFBUSxLQUFLLENBQUM7QUFBQSxFQUM5QztBQUFBLEVBQ0EsV0FBV0EsU0FBUUQsVUFBUyxRQUFRO0FBQUEsRUFDcEMsT0FBTztBQUFBLElBQ0wsS0FBSztBQUFBLE1BQ0gsU0FBUyxDQUFDLE1BQU07QUFBQSxNQUNoQixPQUFPQyxTQUFRQyxtQ0FBVyx5QkFBeUI7QUFBQSxNQUNuRCxNQUFNO0FBQUEsTUFDTixVQUFVO0FBQUEsSUFDWjtBQUFBLElBQ0E7QUFBQSxJQUNBLFdBQVc7QUFBQSxJQUNYLFFBQVE7QUFBQSxJQUNSLHNCQUFzQjtBQUFBLElBQ3RCLGVBQWU7QUFBQSxJQUNmLGVBQWU7QUFBQSxNQUNiLFVBQVUsQ0FBQyxRQUFRO0FBQUEsSUFDckI7QUFBQSxFQUNGO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFsicmVzb2x2ZSIsICJwcm9jZXNzIiwgInBhdGgiLCAib3V0RGlyIiwgIl9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lIiwgInJvb3REaXIiLCAicmVzb2x2ZSIsICJfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSJdCn0K
